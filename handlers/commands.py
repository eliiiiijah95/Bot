import re
import time


import pandas as pd
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile, LabeledPrice, PreCheckoutQuery, ReplyKeyboardRemove, \
    BotCommand

from sqlalchemy.ext.asyncio import AsyncSession

import logging

from config_reader import config
from database.orm_query import (orm_add_customer, orm_get_information, orm_update_customer_field,
                                orm_get_information_for_exel, orm_get_time_sub, orm_add_profession_and_category,
                                orm_get_category, orm_get_profession, get_sub_status, save_business_access,
                                get_type_access, get_sub_end, orm_add_user_id_access, orm_unsubscribe_access,
                                orm_unsubscribe_customer, orm_check_trial, orm_save_user_consent)

from keyboards.keyboard import (main_menu_keyboard, first_time_menu_keyboard, social_media_keyboard,
                                profession_selection_keyboard, action_selection_keyboard, company_check_keyboard,
                                subscription_options_keyboard, confirm_subscription_keyboard,
                                existing_user_menu_keyboard, to_change_information, to_change_contacts, skip,
                                confirm_conditions, help_keyboard)
from payment import days_to_seconds, time_sub_day
from handlers.auto_payment import create_initial_payment

router = Router()



class AddCustomer(StatesGroup):
    name = State()
    profession = State() # –û—Ç–¥–µ–ª—å–Ω–æ
    lastname = State()
    link_to_instagram = State()
    city = State()
    blog_category = State ()
    number_of_subscribers = State()
    coverages = State()
    er = State()
    link_to_telegram = State()
    link_to_vk = State()
    link_to_youtube = State()
    advertising_formats = State()
    cost_of_advertising_in_stories = State()
    cost_of_advertising_in_a_post = State()
    cost_of_advertising_in_reels = State()
    phone_number = State()
    email = State()
    time_sub = State() # –û—Ç–¥–µ–ª—å–Ω–æ
    category = State()

class EditCustomer(StatesGroup):
    waiting_for_value = State()
    current_field = State()




@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ ‚¨áÔ∏è',
                        reply_markup=main_menu_keyboard())


private = [
    BotCommand(command='menu', description='–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
    BotCommand(command='help', description='–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É')
]


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    await message.reply(f'{message.from_user.first_name}. –≠—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è',
                        reply_markup=main_menu_keyboard())


@router.message(Command("help"))
async def cmd_menu(message: Message):
    await message.reply(f'{message.from_user.first_name}. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                        reply_markup=help_keyboard())


@router.callback_query(F.data == 'first_time')
async def first_time(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'{callback.from_user.first_name}, '
                                  f'–æ —á–µ–º —Ç—ã —Ö–æ—á–µ—à—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —É–∑–Ω–∞—Ç—å?',
                                  reply_markup=first_time_menu_keyboard())


@router.callback_query(F.data == 'about_project')
async def about_project(callback: CallbackQuery):
    await callback.answer()
    text = """–†–µ–µ—Å—Ç—Ä –±–ª–æ–≥–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤

–†–µ–µ—Å—Ç—Ä ‚Äî —ç—Ç–æ –∑–∞–∫—Ä—ã—Ç–∞—è –±–∞–∑–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–µ–¥–∏–Ω—è–µ—Ç –±–ª–æ–≥–µ—Ä–æ–≤, –±—Ä–µ–Ω–¥—ã –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ó–¥–µ—Å—å –±–∏–∑–Ω–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, –∞ –±–ª–æ–≥–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞.  

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
‚úÖ –ë–ª–æ–≥–µ—Ä—ã –¥–æ–±–∞–≤–ª—è—é—Ç —Å–µ–±—è –≤ —Ä–µ–µ—Å—Ç—Ä, –∑–∞–ø–æ–ª–Ω—è—è –∞–Ω–∫–µ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç–µ–º–∞—Ç–∏–∫–µ –∏ —Ä–∞—Å—Ü–µ–Ω–∫–∞—Ö.  
‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã, —Å—Ç–∏–ª–∏—Å—Ç—ã, SMM-–º–µ–Ω–µ–¥–∂–µ—Ä—ã, –ø–∏–∞—Ä—â–∏–∫–∏, –º–æ–¥–µ–ª–∏, –≤–∏–∑–∞–∂–∏—Å—Ç—ã –∏ –¥—Ä.) –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –±–ª–æ–≥–µ—Ä–∞–º –∏ –±—Ä–µ–Ω–¥–∞–º.  
‚úÖ –ë—Ä–µ–Ω–¥—ã –ø–æ–∫—É–ø–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∏ –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.  

–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –±–ª–æ–≥–µ—Ä–∞–º?  
üî• –ë–æ–ª—å—à–µ —Ä–µ–∫–ª–∞–º—ã ‚Äì –±—Ä–µ–Ω–¥—ã —Å–∞–º–∏ –Ω–∞—Ö–æ–¥—è—Ç —Ç–µ–±—è –∏ –¥–µ–ª–∞—é—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.  
üì¢ –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ‚Äì —Ç–≤–æ–∏ —Ä–∞—Å—Ü–µ–Ω–∫–∏ —Å—Ä–∞–∑—É –≤–∏–¥–Ω—ã, –Ω–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.  
ü§ù –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ –∏ –Ω–æ–≤—ã–µ –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏ ‚Äì –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞–º, —Å—Ç–∏–ª–∏—Å—Ç–∞–º, –º–æ–¥–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ø–æ–≤—ã–º.  
üöÄ –†–∞—Å—Ç—É—â–∏–π —Å–ø—Ä–æ—Å ‚Äì –±–∏–∑–Ω–µ—Å—É –Ω—É–∂–Ω—ã –±–ª–æ–≥–µ—Ä—ã –∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –∞ —Ç—ã —É–∂–µ –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –≤ —É–¥–æ–±–Ω–æ–º —Ä–µ–µ—Å—Ç—Ä–µ.  

–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º?  
üì∏ –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã ‚Äì —Ç–µ–±—è —É–≤–∏–¥—è—Ç –±–ª–æ–≥–µ—Ä—ã –∏ –±—Ä–µ–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —É—Å–ª—É–≥–∏.  
üìå –õ–µ–≥—á–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–µ–±—è ‚Äì –Ω–µ—Ç –Ω—É–∂–¥—ã —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –∏ –æ–ø–ª–∞—Ç—É —Ä–µ–∫–ª–∞–º—É ‚Äî –æ–Ω–∏ —Å–∞–º–∏ —Ç–µ–±—è –Ω–∞—Ö–æ–¥—è—Ç.  
üí° –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—ä–µ–º–∫–∞—Ö, —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏—è—Ö –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥.  
üéØ –í—ã—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äì –≤ —Ä–µ–µ—Å—Ç—Ä–µ —Å–æ–±—Ä–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–≥–µ—Ä—ã –∏ –±–∏–∑–Ω–µ—Å, –≥–æ—Ç–æ–≤—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏.  

–ü–æ—á–µ–º—É —ç—Ç–æ –≤—ã–≥–æ–¥–Ω–æ –±–∏–∑–Ω–µ—Å—É?  
üéØ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ ‚Äì –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é, –≤—Å—è –±–∞–∑–∞ –ø–æ–¥ —Ä—É–∫–æ–π.  
üí° –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã ‚Äì –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏, –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏ –¥—Ä –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ .  
üí∞ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ü–µ–Ω ‚Äì —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏, –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç –∏ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤.  
üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏  ‚Äì –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–∏, –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ, –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã ‚Äî –≤—Å–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞–∂–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –∫—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∂–¥–µ—Ç –≤–∞—Å! 

–í–∞–∂–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –†–µ–µ—Å—Ç—Ä –ø–æ–º–æ–≥–∞–µ—Ç –ó–ê–ö–û–ù–ù–û –æ–±–æ–π—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è  
–° 1 —Å–µ–Ω—Ç—è–±—Ä—è –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É –∑–∞–∫–æ–Ω, —Ä–µ–≥—É–ª–∏—Ä—É—é—â–∏–π —Ä–µ–∫–ª–∞–º—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö. –ú–Ω–æ–≥–∏–µ –±—Ä–µ–Ω–¥—ã –∏ –±–ª–æ–≥–µ—Ä—ã —Å—Ç–æ–ª–∫–Ω—É—Ç—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –≤ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã.  

‚úÖ –í —Ä–µ–µ—Å—Ç—Ä–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ Instagram*, –Ω–æ –∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å–æ—Ü—Å–µ—Ç–∏: Telegram, VK, –î–∑–µ–Ω –∏ —Ç. –¥.  
‚úÖ –ë—Ä–µ–Ω–¥—ã —Å–º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π, –æ–±—Ö–æ–¥—è –∂–µ—Å—Ç–∫–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.  
‚úÖ –ë–ª–æ–≥–µ—Ä—ã –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ —Ç–µ—Ä—è—é—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∞ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –µ—â—ë —Ü–µ–Ω–Ω–µ–µ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.  

> –í –Ω–æ–≤–æ–º –º–∏—Ä–µ —Ä–µ–∫–ª–∞–º—ã –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —Ç–µ, –∫—Ç–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º. –ë—É–¥—å –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö ‚Äì –ø–æ–ø–∞–¥–∏ –≤ —Ä–µ–µ—Å—Ç—Ä! üöÄ  

(*Instagram –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Meta, –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–π –≤ –†–æ—Å—Å–∏–∏.)"""

    await callback.message.answer(text)


@router.callback_query(F.data == 'about_me')
async def about_me(callback: CallbackQuery):
    await callback.answer()
    text = """  

–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∏—Ä–∞ ‚Äî –±–ª–æ–≥–µ—Ä, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Ä–µ–µ—Å—Ç—Ä–∞ –±–ª–æ–≥–µ—Ä–æ–≤. –í–µ–¥—É Instagram –∏ Telegram –æ —Å—Ç–∏–ª–µ, –º–æ–¥–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∂–∏–∑–Ω–∏ –≤ —Ä–∏—Ç–º–µ –±–æ–ª—å—à–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ú–Ω–µ –¥–æ–≤–µ—Ä—è—é—Ç –±—Ä–µ–Ω–¥—ã, –∫–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∑–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º, –∞ —è –ø–æ–º–æ–≥–∞—é –±–ª–æ–≥–µ—Ä–∞–º –∏ –±–∏–∑–Ω–µ—Å—É –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.  

üìå –ß—Ç–æ —è –¥–µ–ª–∞—é?  
‚Äî –†–∞–∑–≤–∏–≤–∞—é —Ä–µ–µ—Å—Ç—Ä –±–ª–æ–≥–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ ‚Äî —É–¥–æ–±–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–π –∏ —Ä–µ–∫–ª–∞–º—ã.  
‚Äî –í–µ–¥—É –∑–∞–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–ª—É–±, –≥–¥–µ –¥–µ–ª—é—Å—å –∏–Ω—Å–∞–π–¥–∞–º–∏ –æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–¥–∞—Ö
‚Äî –ü–æ–º–æ–≥–∞—é –±–ª–æ–≥–µ—Ä–∞–º —Ä–∞—Å—Ç–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏, –±—ã—Ç—å –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.  

–ü–æ—á–µ–º—É —è —Å–æ–∑–¥–∞–ª–∞ —Ä–µ–µ—Å—Ç—Ä –±–ª–æ–≥–µ—Ä–æ–≤?  
–Ø –ø–æ–±—ã–≤–∞–ª–∞ –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã ‚Äî –∏ –∫–∞–∫ –±–ª–æ–≥–µ—Ä, –∏ –∫–∞–∫ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å.  

–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–ª —Å–≤–æ–π –æ–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —è —Ä–∞–±–æ—Ç–∞–ª–∞ —Å –±—Ä–µ–Ω–¥–∞–º–∏, —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å —Ç–µ–º, —á—Ç–æ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –±–ª–æ–≥–µ—Ä–∞ ‚Äî —ç—Ç–æ —Ö–∞–æ—Å:   
‚ùå –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–æ–º—ã—Ö  
‚ùå –ó–∞–≤—ã—à–µ–Ω–Ω—ã–µ –∏–ª–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ä–∞—Å—Ü–µ–Ω–∫–∏  
‚ùå –ù–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –æ—Ö–≤–∞—Ç—ã, –æ—Ç–∫–∞–∑ –æ—Ç –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–∫–ª–∞–º—ã  

–ö–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–ª –ø—Ä–æ–∫–∞—Ç –æ–¥–µ–∂–¥—ã –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚Äî —è —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å —Ç–µ–º, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç—Å–Ω—è—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏, –º–æ–¥–µ–ª–∏ –∏ –ø—Ä–æ—á–∏–µ –Ω—é–∞–Ω—Å—ã 
‚ùå –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º 
‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–ª–Ω—ã–π. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—à—å —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ —Å–≤–æ–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 
‚ùå –î–æ–ª–≥–æ –∂–¥–∞—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è 

–ê –∫–æ–≥–¥–∞ —è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–ª–æ–≥, –ø–æ–Ω—è–ª–∞, —á—Ç–æ –±—Ä–µ–Ω–¥–∞–º —Å–ª–æ–∂–Ω–æ –Ω–∞—Å –Ω–∞–π—Ç–∏:  
‚ùå –õ–∏–±–æ –æ–±—Ä–∞—â–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –±–ª–æ–≥–µ—Ä–∞–º  
‚ùå –õ–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –±–∞—Ä—Ç–µ—Ä –≤–º–µ—Å—Ç–æ –¥–µ–Ω–µ–≥  
‚ùå –õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ  

–¢–∞–∫ –ø–æ—è–≤–∏–ª–∞—Å—å –∏–¥–µ—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ —É–¥–æ–±–Ω–æ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞, –≥–¥–µ:  
‚úîÔ∏è –ë—Ä–µ–Ω–¥—ã –Ω–∞—Ö–æ–¥—è—Ç –±–ª–æ–≥–µ—Ä–æ–≤ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Ä–∞—Å—Ü–µ–Ω–∫–∞–º–∏  
‚úîÔ∏è –ë–ª–æ–≥–µ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç  
‚úîÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã, —Å—Ç–∏–ª–∏—Å—Ç—ã, –º–æ–¥–µ–ª–∏, SMM) –Ω–∞—Ö–æ–¥—è—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤  

–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –ï—Å–ª–∏ —Ç—ã –±–ª–æ–≥–µ—Ä, –±—Ä–µ–Ω–¥ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∏—Ä! üöÄ

"""
    await callback.message.answer(text,
                                  reply_markup=social_media_keyboard())


@router.callback_query(F.data == 'rules_and_conventions')
async def rules_and_conventions(callback: CallbackQuery):
    file_rules_and_conventions = FSInputFile('files/–ü–†–ê–í–ò–õ–ê_–ò_–°–û–ì–õ–ê–®–ï–ù–ò–ï_–û_–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò_–†–ï–ï–°–¢–†–û–ú_–ë–õ–û–ì–ï–†–û–í_–ò_–ö–û–ù–¢–ï–ù–¢.pdf',
                                             filename='terms_of_use.pdf')
    await callback.answer()
    await callback.message.answer_document(file_rules_and_conventions,
                                           caption='–ü—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–µ—Å—Ç—Ä–æ–º –±–ª–æ–≥–µ—Ä–æ–≤')


@router.callback_query(F.data == 'already_with_you')
async def already_with_you(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    sub_status = await get_sub_status(session, user_id)

    if sub_status:
        await callback.answer()
        await callback.message.answer(f'–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                                      reply_markup=existing_user_menu_keyboard())
    else:
        await callback.answer()
        await callback.message.answer('–ü—Ä–∏–æ–±—Ä–∏—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É')

@router.callback_query(F.data == 'subscription_and_conditions')
async def sub(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏')


def is_valid_name(name: str) -> bool:
    return re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{2,100}", name) is not None


def is_valid_city(name: str) -> bool:
    city_list = [city.strip() for city in name.split(",")]
    pattern = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{2,100}$")
    return all(pattern.fullmatch(city) for city in city_list)

def is_valid_category(category: str) -> list[str]:
    parts = [cat.strip().capitalize() for cat in category.split(',')]

    return [p for p in parts if re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë\s\-]{2,100}", p)]


@router.callback_query(F.data == 'into_table')
async def into_table(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    sub_status = await get_sub_status(session, user_id)

    if sub_status:
        await callback.answer()
        await callback.message.answer('–í—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ')
    else:
        profession = await orm_get_profession(session, user_id)
        if not profession:
            await callback.answer()
            await callback.message.answer(f'–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:',
                                      reply_markup=profession_selection_keyboard())
        else:
            await callback.answer()
            await callback.message.answer(f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',
                                          reply_markup=action_selection_keyboard())


PROFESSION_CATEGORIES = {
    'blogger': 'blogger',
    'visagiste': 'specialist',
    'stylist': 'specialist',
    'photographer': 'specialist',
    'mobile_photographer': 'specialist',
    'videographer': 'specialist',
    'pr_manager': 'specialist',
    'smm': 'specialist',
    'model': 'specialist',
    'agency': 'specialist'
}


PROFESSION_TRANSLATION = {
    'blogger': '–ë–ª–æ–≥–µ—Ä',
    'visagiste': '–í–∏–∑–∞–∂–∏—Å—Ç',
    'stylist': '–°—Ç–∏–ª–∏—Å—Ç',
    'photographer': '–§–æ—Ç–æ–≥—Ä–∞—Ñ',
    'mobile_photographer': '–ú–æ–±–∏–ª—å–Ω—ã–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ',
    'videographer': '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ',
    'pr_manager': 'PR-–º–µ–Ω–µ–¥–∂–µ—Ä',
    'smm': 'SMM',
    'model': '–ú–æ–¥–µ–ª—å',
    'agency': '–ê–≥–µ–Ω—Ç—Å—Ç–≤–æ'
}


@router.callback_query(F.data.in_(PROFESSION_CATEGORIES.keys()))
async def save_profession_and_categories(callback: CallbackQuery, session: AsyncSession):
    profession = callback.data
    category = PROFESSION_CATEGORIES[profession]
    translate_profession = PROFESSION_TRANSLATION.get(profession, profession)

    user_id = callback.from_user.id
    await orm_add_profession_and_category(session, translate_profession, category, user_id)
    await callback.message.answer("‚úÖ–ü—Ä–æ—Ñ–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    await callback.message.answer(f'–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',
                                  reply_markup=action_selection_keyboard())
    await callback.answer()

@router.callback_query(F.data == 'payment')
async def handel_buy_confirm_conditions(callback: CallbackQuery):
    await callback.answer()
    try:

        await callback.message.answer(
            f"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n"
            f"–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=confirm_conditions()
        )

        file_rules_and_conventions = FSInputFile(
            'files/–ü—Ä–∞–≤–∏–ª–∞_–∏_—Å–æ–≥–ª–∞—à–µ–Ω–∏—è.pdf',
            filename='rules_and_conventions.pdf')
        await callback.message.answer_document(file_rules_and_conventions,
                                               caption='–ü—Ä–∞–≤–∏–ª–∞ –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è: {e}")


@router.callback_query(F.data == 'accept_policy')
async def handle_buy_subscription(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer()
    try:
        user_id = callback.from_user.id
        await orm_save_user_consent(session, user_id)

        can_use_trail = await orm_check_trial(session, user_id)

        if can_use_trail:
            payment_url, payment_id = create_initial_payment(user_id, 100, payment_type='trial')
            await callback.message.answer(
                f"üéâ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 30 –¥–Ω–µ–π –∑–∞ 1 ‚ÇΩ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\nüîó {payment_url}",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            category = await orm_get_category(session, user_id)
            if category == 'blogger':
                subscription_price = 40000
            else:
                subscription_price = 30000

            payment_url, payment_id = create_initial_payment(user_id, subscription_price, payment_type='subscription')


            await callback.message.answer(
                f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\nüîó {payment_url}",
                reply_markup=ReplyKeyboardRemove()
            )

    except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")
            current_state = await state.get_state()
            if current_state is not None:
                await state.clear()


@router.callback_query(F.data == 'start_form')
async def start_form(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer()
    user_id = callback.from_user.id

    has_sub = await get_sub_status(session, user_id)

    if not has_sub:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∫–µ—Ç–µ.")
        return

    try:
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(AddCustomer.name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏: {e}")


@router.message(AddCustomer.name, F.text)
async def ask_lastname(message: Message, state: FSMContext):
    try:
        name = message.text.strip()
        if not is_valid_name(name):
            await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(name=name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:')
        await state.set_state(AddCustomer.lastname)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏] {e}")


@router.message(AddCustomer.lastname, F.text)
async def ask_instagram(message: Message, state: FSMContext):
    try:
        lastname = message.text.strip()
        if not is_valid_name(lastname):
            await message.answer('–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            return
        await state.update_data(lastname=lastname)
        await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram:')
        await state.set_state(AddCustomer.link_to_instagram)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–º–∏–ª–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤ —Ñ–∞–º–∏–ª–∏–∏] {e}")


@router.message(AddCustomer.link_to_instagram, F.text)
async def ask_city(message: Message, state: FSMContext):
    try:
        link_to_instagram = message.text.strip()
        instagram_pattern = r"^https://www\.instagram\.com/[A-Za-z0-9_\.]+/?$"

        if not re.match(instagram_pattern, link_to_instagram):
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Instagram, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '
                                 f'"https://www.instagram.com/" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: '
                                 f'https://www.instagram.com/username')
            return
        await state.update_data(link_to_instagram=link_to_instagram)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:')
        await state.set_state(AddCustomer.city)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤ —Ñ–∞–º–∏–ª–∏–∏] {e}")


@router.message(AddCustomer.city, F.text)
async def ask_blog_category(message: Message, state: FSMContext):
    try:
        city = message.text.strip()
        if not is_valid_city(city):
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
            return
        await state.update_data(city=city)
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞:')
        await state.set_state(AddCustomer.blog_category)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞] {e}")


@router.message(AddCustomer.blog_category, F.text)
async def ask_subscribers(message: Message, state: FSMContext):
    try:
        raw_input = message.text.strip()
        blog_category = is_valid_category(raw_input)

        if not blog_category:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏ (–ø—Ä–∏–º–µ—Ä: –ú–æ–¥–∞, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è):")
            return

        blog_category_str = ", ".join(blog_category)

        await state.update_data(blog_category=blog_category_str)
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:')
        await state.set_state(AddCustomer.number_of_subscribers)

    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ blog_category] {e}")


@router.message(AddCustomer.number_of_subscribers, F.text)
async def ask_coverages(message: Message, state: FSMContext):
    try:
        text = message.text.strip()
        if not text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 15000")
            return

        number_of_subscribers = int(text)

        if number_of_subscribers < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(number_of_subscribers=number_of_subscribers)
        await message.answer('–°—Ä–µ–¥–Ω–∏–π –æ—Ö–≤–∞—Ç:')
        await state.set_state(AddCustomer.coverages)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ number_of_subscribers] {e}")


@router.message(AddCustomer.coverages, F.text)
async def ask_er(message: Message, state: FSMContext):
    try:
        text = message.text.strip()
        if not text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 15000.")
            return

        coverages = int(text)

        if coverages < 0:
            await message.answer('–û—Ö–≤–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return

        await state.update_data(coverages=coverages)
        await message.answer('ER (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö): \n'
                             '–ü–æ—Å—á–∏—Ç–∞—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å'
                             'https://t.me/labelup_bot \n'
                             '*–≤—ã –Ω–µ—Å–µ—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ'
                             )
        await state.set_state(AddCustomer.er)
    except Exception as e:
        logging.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ—Ö–≤–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        logging.error(f'[–û—à–∏–±–∫–∞ coverages] {e}')


@router.message(AddCustomer.er, F.text)
async def ask_telegram(message: Message, state: FSMContext):
    try:
        text = message.text.strip().replace(',', '.')
        try:
            er = float(text)
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ER —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 15.5 –∏–ª–∏ 100.")
            return

        if er < 0 or er > 100:
            await message.answer('ER –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            return

        await state.update_data(er=er)
        await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å):', reply_markup=skip('skip_telegram'))
        await state.set_state(AddCustomer.link_to_telegram)

    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ ER. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ ER] {e}")

@router.message(AddCustomer.link_to_telegram, F.text)
async def ask_vk(message: Message, state: FSMContext):
    try:
        link_to_telegram = message.text.strip()
        telegram_pattern = r"^(https?:\/\/)?t\.me\/[A-Za-z0-9_]+$|^@[A-Za-z0-9_]+$"
        if not re.match(telegram_pattern, link_to_telegram):
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram. –ü—Ä–∏–º–µ—Ä: https://t.me/username.")
            return
        await state.update_data(link_to_telegram=link_to_telegram)
        await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ VK (–µ—Å–ª–∏ –µ—Å—Ç—å):', reply_markup=skip('skip_vk'))
        await state.set_state(AddCustomer.link_to_vk)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ link_to_telegram] {e}")


@router.message(AddCustomer.link_to_vk, F.text)
async def ask_youtube(message: Message, state: FSMContext):
    try:
        link_to_vk = message.text.strip()
        vk_pattern = r"^https://(m\.)?vk\.com/[A-Za-z0-9_\.]+/?$"

        if not re.match(vk_pattern, link_to_vk):
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ VK, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '
                         f'"https://vk.com/" –∏–ª–∏ "https://m.vk.com/" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ —Ç–æ—á–∫–∏. –ü—Ä–∏–º–µ—Ä: '
                         f'https://vk.com/username')
            return

        await state.update_data(link_to_vk=link_to_vk)
        await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube (–µ—Å–ª–∏ –µ—Å—Ç—å):', reply_markup=skip('skip_youtube'))
        await state.set_state(AddCustomer.link_to_youtube)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ VK. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ –Ω–∞ VK] {e}")


@router.message(AddCustomer.link_to_youtube, F.text)
async def ask_formats(message: Message, state: FSMContext):
    try:
        link_to_youtube = message.text.strip()
        youtube_pattern = r"^https://(www\.)?youtube\.com/[A-Za-z0-9_-]+/?$"

        if not re.match(youtube_pattern, link_to_youtube):
            await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª YouTube, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '
                         f'"https://www.youtube.com/" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã. –ü—Ä–∏–º–µ—Ä: '
                         f'https://www.youtube.com/CHANNEL_NAME.')
            return

        await state.update_data(link_to_youtube=link_to_youtube)
        await message.answer('–ö–∞–∫–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ?')
        await state.set_state(AddCustomer.advertising_formats)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –≤ —Å—Å—ã–ª–∫–µ –Ω–∞ YouTube] {e}")


@router.message(AddCustomer.advertising_formats, F.text)
async def ask_cost_stories(message: Message, state: FSMContext):
    try:
        raw_input = message.text.strip()
        formats = is_valid_category(raw_input)

        if not formats:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–ª–∞–º—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏ (–ø—Ä–∏–º–µ—Ä: Stories, –ü–æ—Å—Ç, Reels):")
            return

        advertising_formats =", ".join(formats)
        await state.update_data(advertising_formats=advertising_formats)
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ Stories:')
        await state.set_state(AddCustomer.cost_of_advertising_in_stories)

    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ä–µ–∫–ª–∞–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ advertising_formats] {e}")

@router.message(AddCustomer.cost_of_advertising_in_stories, F.text)
async def ask_cost_post(message: Message, state: FSMContext):
    try:
        raw_input = message.text.strip().replace(',', '.')
        cost = float(raw_input)

        if cost < 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(cost_of_advertising_in_stories=cost)
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ –ø–æ—Å—Ç–µ:')
        await state.set_state(AddCustomer.cost_of_advertising_in_a_post)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 2500.50)")
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ cost_of_advertising_in_stories] {e}")


@router.message(AddCustomer.cost_of_advertising_in_a_post, F.text)
async def ask_cost_reels(message: Message, state: FSMContext):
    try:
        raw_input = message.text.strip().replace(',', '.')
        cost = float(raw_input)

        if cost < 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(cost_of_advertising_in_a_post=cost)
        await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ Reels:')
        await state.set_state(AddCustomer.cost_of_advertising_in_reels)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 2500.50)")
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ cost_of_advertising_in_a_post] {e}")


@router.message(AddCustomer.cost_of_advertising_in_reels, F.text)
async def ask_phone(message: Message, state: FSMContext):
    try:
        raw_input = message.text.strip().replace(',', '.')
        cost = float(raw_input)

        if cost < 0:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(cost_of_advertising_in_reels=cost)
        await message.answer('–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
        await state.set_state(AddCustomer.phone_number)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 2500.50)")
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"[–û—à–∏–±–∫–∞ cost_of_advertising_in_reels] {e}")

@router.message(AddCustomer.phone_number, F.text)
async def ask_email(message: Message, state: FSMContext):
    try:
        phone = message.text.strip()

        if not re.fullmatch(r"(\+7|8|7)\d{10}", phone):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +79001234567).")
            return

        await state.update_data(phone_number=phone)
        await message.answer('–í–∞—à email:')
        await state.set_state(AddCustomer.email)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"[–û—à–∏–±–∫–∞ phone_number] {e}")

@router.message(AddCustomer.email, F.text)
async def save_and_finish(message: Message, state: FSMContext, session: AsyncSession):
    email = message.text.strip()
    user_id = message.from_user.id

    if not re.fullmatch(r"[^@ \t\r\n]+@[^@ \t\r\n]+\.[^@ \t\r\n]+", email):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–ø—Ä–∏–º–µ—Ä: name@example.com).")
        return

    await state.update_data(email=email)
    data = await state.get_data()

    try:
        success = await orm_add_customer(session, data, user_id)
        if not success:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        customer_data = await orm_get_information(session, user_id)
        get_time = await orm_get_time_sub(session, user_id)
        user_sub = time_sub_day(get_time)

        if user_sub is None:
            user_sub = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        elif user_sub is False:
            user_sub = "–ò—Å—Ç–µ–∫–ª–∞"
        else:
            user_sub = f"–û—Å—Ç–∞–ª–æ—Å—å {user_sub}"

        if customer_data:
            response_text = (
                f"–ò–º—è: {customer_data[0]}\n"
                f"–§–∞–º–∏–ª–∏—è: {customer_data[1]}\n"
                f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {customer_data[2]}\n"
                f"Instagram: {customer_data[3]}\n"
                f"–ì–æ—Ä–æ–¥: {customer_data[4]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞: {customer_data[5]}\n"
                f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {customer_data[6]}\n"
                f"–û—Ö–≤–∞—Ç: {customer_data[7]}\n"
                f"ER: {customer_data[8]}\n"
                f"Telegram: {customer_data[9]}\n"
                f"VK: {customer_data[10]}\n"
                f"YouTube: {customer_data[11]}\n"
                f"–§–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã: {customer_data[12]}\n"
                f"Stories: {customer_data[13]}\n"
                f"–ü–æ—Å—Ç: {customer_data[14]}\n"
                f"Reels: {customer_data[15]}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_data[16]}\n"
                f"Email: {customer_data[17]}\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {user_sub}\n"
                f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –ø–µ—Ä–∏–æ–¥ 30 –¥–Ω–µ–π –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å 1 ‚ÇΩ. "
                f"–î–∞–ª—å—à–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —É—Å–ª–æ–≤–∏—è–º –ø–æ–¥–ø–∏—Å–∫–∏. \n"
                f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ç–æ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ¬´—É–∂–µ —Å –≤–∞–º–∏¬ª."
            )
            await message.answer(response_text)
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}')
    finally:
        await state.clear()


@router.callback_query(F.data == 'access_table')
async def access_table(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–î–∞–≤–∞–π —Å–º–µ—Ä–∏–º! –¢—ã –∫–æ–º–ø–∞–Ω–∏—è, –±–∏–∑–Ω–µ—Å, –±—Ä–µ–Ω–¥?',
                                  reply_markup=company_check_keyboard())


@router.callback_query(F.data == 'yes')
async def info_table(callback: CallbackQuery, session: AsyncSession):

    user_id = callback.from_user.id
    await orm_add_user_id_access(session, user_id)

    await callback.answer()
    await callback.message.answer(f'–°—É–ø–µ—Ä! –ü–æ–ª—É—á–∏ –ø–æ–ª–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –≥–¥–µ –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ '
                                  f'–¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞'
                                  f' –º–æ–¥–µ–ª–∏, –±–ª–æ–≥–µ—Ä—ã, —Å–º–º, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ã, –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ—ã –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã '
                                  f'–•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Ä–∞–∑–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞?',
                                  reply_markup=subscription_options_keyboard())


@router.callback_query(F.data == 'inf_for_me')
async def user_information(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    customer_data = await orm_get_information(session, user_id)
    get_time = await orm_get_time_sub(session, user_id)

    user_sub = time_sub_day(get_time)

    if user_sub is None:
        user_sub = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    elif user_sub is False:
        user_sub = "–ò—Å—Ç–µ–∫–ª–∞"
    else:
        user_sub = f"–û—Å—Ç–∞–ª–æ—Å—å {user_sub}"

    if customer_data:
        response_text = (
            f"–ò–º—è: {customer_data[0]}\n"
            f"–§–∞–º–∏–ª–∏—è: {customer_data[1]}\n"
            f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {customer_data[2]}\n"
            f"Instagram: {customer_data[3]}\n"
            f"–ì–æ—Ä–æ–¥: {customer_data[4]}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞: {customer_data[5]}\n"
            f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {customer_data[6]}\n"
            f"–û—Ö–≤–∞—Ç: {customer_data[7]}\n"
            f"ER: {customer_data[8]}\n"
            f"Telegram: {customer_data[9]}\n" 
            f"VK: {customer_data[10]}\n" 
            f"YouTube: {customer_data[11]}\n"
            f"–§–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã: {customer_data[12]}\n"
            f"Stories: {customer_data[13]}\n"
            f"–ü–æ—Å—Ç: {customer_data[14]}\n"
            f"Reels: {customer_data[15]}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_data[16]}\n"
            f"Email: {customer_data[17]}\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {user_sub}"
        )
    else:
        response_text = "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    await callback.answer()
    await callback.message.answer(response_text)


@router.callback_query(F.data == 'change_inf_about_yourself')
async def change_info(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                  reply_markup=to_change_information())


FIELD_TRANSLATIONS = {
    "name": "–ò–º—è",
    "lastname": "–§–∞–º–∏–ª–∏—è",
    "profession": "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è",
    "link_to_instagram": "–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram",
    "city": "–ì–æ—Ä–æ–¥",
    "blog_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞",
    "number_of_subscribers": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
    "coverages": "–û—Ö–≤–∞—Ç—ã",
    "er": "ER",
    "link_to_telegram": "–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram",
    "link_to_vk": "–°—Å—ã–ª–∫–∞ –Ω–∞ VK",
    "link_to_youtube": "–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube",
    "advertising_formats": "–§–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã",
    "cost_of_advertising_in_stories": "–¶–µ–Ω–∞ Stories",
    "cost_of_advertising_in_a_post": "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞",
    "cost_of_advertising_in_reels": "–¶–µ–Ω–∞ Reels",
    "phone_number": "–¢–µ–ª–µ—Ñ–æ–Ω",
    "email": "Email",
}


@router.callback_query(lambda c: c.data in FIELD_TRANSLATIONS)
async def change_info(callback: CallbackQuery, state: FSMContext):
    field = callback.data
    readable_field = FIELD_TRANSLATIONS.get(field, field)
    await state.update_data(current_field=field)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è ¬´{readable_field}¬ª:")
    await state.set_state(EditCustomer.waiting_for_value)


@router.message(EditCustomer.waiting_for_value, F.text)
async def update_lastname(message: Message, state: FSMContext, session: AsyncSession):
    new_value = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    field_to_update = data.get('current_field')
    readable_field = FIELD_TRANSLATIONS.get(field_to_update, field_to_update)

    try:
        await orm_update_customer_field(session, user_id, field_to_update, new_value)
        await message.answer(f"‚úÖ –ü–æ–ª–µ '{readable_field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == 'contacts_for_communication')
async def change_contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å',
                                  reply_markup=to_change_contacts())


@router.callback_query(F.data == 'sub_3000')
async def questions(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(f'–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü? –í—ã–≥–æ–¥–Ω–µ–π –∫—É–ø–∏—Ç—å —Å—Ä–∞–∑—É '
                                  f'–∏ –∏–º–µ—Ç—å –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π –æ–±–Ω–æ–≤–ª—è—é—â—É—é—Å—è —Ç–∞–±–ª–∏—Ü—É. '
                                  f'–í –¥–∞–ª—å–Ω–µ–π—à–µ–º —Å —Ä–æ—Å—Ç–æ–º —Ç–∞–±–ª–∏—Ü—ã –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ ü§î',
                                  reply_markup=confirm_subscription_keyboard())


@router.callback_query(F.data == 'sure')
async def handle_buy_monthly_table(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        subscription_price = 70000
        payment_url, payment_id = create_initial_payment(user_id, subscription_price, payment_type = "table")

        await callback.message.answer(
            f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\nüîó {payment_url}",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")


@router.callback_query(F.data == 'sub_10_000')
async def handle_buy_lifetime_table(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        subscription_price = 230000
        payment_url, payment_id = create_initial_payment(user_id, subscription_price, payment_type = "table_lifetime")

        await callback.message.answer(
            f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\nüîó {payment_url}",
            reply_markup=ReplyKeyboardRemove()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!")


@router.callback_query(F.data == 'check_table')
async def send_exel_table(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    access = await get_type_access(session, user_id)
    if not access:
        await callback.answer()
        await callback.message.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.')
        return

    if access == 'subscription':
        sub_active = await get_sub_end(session, user_id)
        if not sub_active:
            await callback.answer()
            await callback.message.answer("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.")
            return

    await callback.answer("‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")

    customers = await orm_get_information_for_exel(session)
    columns = [
        '–ò–º—è',  # –ò–º—è
        '–§–∞–º–∏–ª–∏—è',  # –§–∞–º–∏–ª–∏—è
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',  # –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
        'Instagram',  # Instagram
        '–ì–æ—Ä–æ–¥',  # –ì–æ—Ä–æ–¥
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞',  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±–ª–æ–≥–∞
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',  # number_of_subscribers
        '–û—Ö–≤–∞—Ç—ã',  # coverages
        'ER (–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å)',  # er
        '–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram',  # link_to_telegram
        '–°—Å—ã–ª–∫–∞ –Ω–∞ VK',  # link_to_vk
        '–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube',  # link_to_youtube
        '–§–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º—ã',  # advertising_formats
        '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ Stories',  # cost_of_advertising_in_stories
        '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ –ü–æ—Å—Ç–µ',  # cost_of_advertising_in_a_post
        '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –≤ Reels',  # cost_of_advertising_in_reels
        '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',  # phone_number
        'Email'  # email
    ]

    df = pd.DataFrame(customers, columns=columns)
    df.to_excel('files/all_customers.xlsx')

    file = FSInputFile('files/all_customers.xlsx')
    await callback.message.answer_document(file, caption='üìä –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≥–æ—Ç–æ–≤!')


@router.callback_query(F.data =='skip_telegram')
async def skip_telegram(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.update_data(link_to_telegram = None)

        await callback.message.edit_reply_markup()

        await callback.message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ VK (–µ—Å–ª–∏ –µ—Å—Ç—å):', reply_markup=skip('skip_vk'))
        await state.set_state(AddCustomer.link_to_vk)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ skip Telegram] {e}")


@router.callback_query(F.data =='skip_vk')
async def skip_vk(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.update_data(link_to_vk=None)

        await callback.message.edit_reply_markup()

        await callback.message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube (–µ—Å–ª–∏ –µ—Å—Ç—å):', reply_markup=skip('skip_youtube'))
        await state.set_state(AddCustomer.link_to_youtube)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ skip VK] {e}")


@router.callback_query(F.data == 'skip_youtube')
async def skip_youtube(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        await state.update_data(link_to_youtube=None)

        await callback.message.edit_reply_markup()

        await callback.message.answer('–ö–∞–∫–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ?')
        await state.set_state(AddCustomer.advertising_formats)
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logging.error(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ skip YouTube] {e}")


@router.callback_query(F.data == 'unsubscribe_customer')
async def process_unsubscribe_customer(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    success = await orm_unsubscribe_customer(session, user_id)
    if success:
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏")
    await callback.answer()


@router.callback_query(F.data == 'unsubscribe_access')
async def process_unsubscribe_access(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id

    success = await orm_unsubscribe_access(session, user_id)
    if success:
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏")
    await callback.answer()
